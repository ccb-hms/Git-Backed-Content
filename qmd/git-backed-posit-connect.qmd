---
title: "Git-Backed Content on Posit Connect Servers"
editor: visual
format: 
    html:
        grid: 
          body-width: 1000px
          sidebar-width: 200px
          margin-width: 200px
        toc: true
        toc-depth: 2
        code-fold: show
        code-tools: true
        theme: 
          light: flatly
          dark: darkly
        number-sections: false
---

## Overview

This tutorial demonstrates how to deploy a Shiny app on Posit Connect, leveraging the [pins](https://cran.r-project.org/web/packages/pins/index.html) package to manage data. The application showcases single-cell RNA sequencing data analysis using the [scRNAseq](https://www.bioconductor.org/packages/release/data/experiment/html/scRNAseq.html) package to fetch data, perform quality control, normalization, and dimensionality reduction, displaying results with a Shiny interface.

The code for this tutorial is contained in the this [GitHub respository](https://github.com/ccb-hms/Git-Backed-Content). The main elements of this tutorial are the following:

-   The analytics code to generate and save the data using `pins`, available in the [master branch](https://github.com/ccb-hms/Git-Backed-Content) of the GitHub repository.
-   The Quarto code to generate this document (which is also deployed on the same Posit Connect server as the Shiny app), available in the [Quarto branch](https://github.com/ccb-hms/Git-Backed-Content/tree/Quarto) of the GitHub repository.
-   The code to generate the Shiny app, available in the [Shiny branch](https://github.com/ccb-hms/Git-Backed-Content/tree/Shiny) of the GitHub repository.

The resulting output of this repository are:

1.  [This Quarto document](https://ccb.connect.hms.harvard.edu/Git-Backed-Content-Tutorial/).
2.  [The Shiny app](https://ccb.connect.hms.harvard.edu/Git-Backed-Content-Shiny-App/) to visualize the single-cell RNA-seq data in reduced dimensions.

Note: you may find more information and details in the Posit Connect documentation [Git-Backed Content section](https://docs.posit.co/connect/user/git-backed/).

## Step 1: Data Preparation

As a best practice, it's advised to separate the analytics code and the Shiny application code either in different repositories or at least different branches of the same GitHub repository.

For organizational clarity and efficiency:

-   **Separate Repositories**: Maintain distinct repositories for your analytics and Quarto/Shiny applications.

-   **Separate Branches**: Alternatively, use different branches within a single GitHub repository to isolate analytics from app development.

To keep all the code in a single repository for the simplicity of this demonstration, the we use separate branches for the analytics code to generate and save the data, the code to generate this app and the code to generate the Shiny app (as described in the Overview).

The analytics code below is available in the [master branch](https://github.com/ccb-hms/Git-Backed-Content) of the GitHub repository.

```{r}
#| echo: true
#| eval: false

# Load necessary libraries
library(scRNAseq)
library(scuttle)
library(scran)
library(scater)

# Fetch the He Organ Atlas Data for the Marrow tissue
sce <- HeOrganAtlasData(tissue = c("Marrow"), ensembl = FALSE)

# Calculate mitochondrial protein-coding feature percentages if needed
is_mito <- grepl("^MT-", rowData(sce)$symbol)
sce <- addPerCellQC(sce, subsets = list(Mito = is_mito))

# Run quality control by flagging low-quality cells based on mitochondrial content
# percent_subsets looks within the data subsets calculated by addPerCellQC
qc_metrics <- quickPerCellQC(colData(sce), 
                             percent_subsets = "subsets_Mito_percent")

# Filter cells using the QC metrics obtained
sce <- sce[, !qc_metrics$discard]

# Normalization using scran
sce <- logNormCounts(sce)

# Selecting highly variable genes
sce <- sce[getTopHVGs(sce, n = 1e3),]

# Compute PCA
sce <- runPCA(sce)

# Compute UMAP
sce <- runUMAP(sce, dimred = "PCA")

# Compute t-SNE
sce <- runTSNE(sce, dimred = "PCA")
```

## Step 2: Pin the Data to Posit Connect Server

### Setting Up the `.Renviron` File

To securely manage API keys and other sensitive information, use an `.Renviron` file. This file is used to set environment variables that R can access. Here's how to set it up:

1.  **Create the `.Renviron` File**: Open a text editor, create a file named `.Renviron`, and add your server URL and API key like this:

```{r}
#| echo: true
#| eval: false

POSIT_SERVER_URL = <your_posit_server_url>
POSIT_API_KEY = <your_api_key>
```

-   Replace `<your_posit_server_url>` and `<your_api_key>` with your actual credentials.

2.  **Location of `.Renviron`**: Place the `.Renviron` file in your home directory (e.g., `~/.Renviron`). Environment variables set in this location are globally accessible across R sessions on your machine. Alternatively, if you only want the file to be used in a specific project, place it in the project's root directory.

3.  **Security Considerations**: Add `.Renviron` to your `.gitignore` file to ensure it is not included in your version control system. This prevents sharing sensitive information such as API keys on GitHub (or any other VCS), even if the repository is private. This precaution safeguards against accidental exposure if the repository becomes public or shared with external collaborators.

To do this, add the following line to your `.gitignore`: `.Renviron`

### Integration with Your Code

Once set up, you can integrate your environment variables into your `R` script. Using the pins package, we can now upload the processed dataset to Posit Connect as shown in the code below. This will allow the Shiny app to access the data from within the platform without maintaining local copies.

```{r}
#| echo: true
#| eval: false

# Load pins library
library(pins)

# Read the server URL and API keys
readRenviron(".Renviron")
server_url <- Sys.getenv("POSIT_SERVER_URL")
api_key <- Sys.getenv("POSIT_API_KEY")

# Connect to Posit server using environment variables
board <- board_connect(
 server = server_url,
 key = api_key
)

# Pin the SingleCellExperiment object
pin_write(board, sce, name = "marrow_single_cell_data", type = "rds")
```

## Step 3: Develop the Shiny App

This Shiny app provides an interactive interface to visualize dimensionality reduction of single-cell RNA-seq data from bone marrow samples. Users can select either UMAP or t-SNE for visualization, with plots colored by cell type using the `reclustered.broad` column. This coloring helps highlight cellular heterogeneity within the dataset.

### Overview of the App

-   **Objective**: To visualize single-cell RNA sequencing data from bone marrow samples with cell types distinguished by color, allowing users to choose between UMAP and t-SNE plots.

-   **User Interface (UI)**: Includes a title, a sidebar for user input, and a main panel for displaying visualizations.

-   **Server Logic**: Processes user input and displays a plot where cell types are color-coded, facilitating exploration of cell heterogeneity.

The code below reads the data pinned on the Posit Connect server and generates the Shiny app. This code is available in the [Shiny branch](https://github.com/ccb-hms/Git-Backed-Content/tree/Shiny) of the GitHub repository.

```{r}
#| echo: true
#| eval: false

# Load required libraries for Shiny
library(shiny)

# Read the pinned data from Posit Connect
board <- board_connect(
    server = Sys.getenv("POSIT_SERVER_URL"), 
    key = Sys.getenv("POSIT_API_KEY")
)
sce <- pin_read(board, name = "marrow_single_cell_data")

# UI
ui <- fluidPage(
  titlePanel("Single Cell RNA-seq Analysis"),
  sidebarLayout(
    sidebarPanel(
      radioButtons("dimred", "Choose Dimensionality Reduction:",
                   choices = c("UMAP", "t-SNE"), selected = "UMAP")
    ),
    mainPanel(
      plotOutput("scatterPlot")
    )
  )
)

# Server
server <- function(input, output, session) {
  
  output$scatterPlot <- renderPlot({
    if (input$dimred == "UMAP") {
      plotReducedDim(sce, dimred = "UMAP", color_by = "reclustered.broad")
    } else {
      plotReducedDim(sce, dimred = "TSNE", color_by = "reclustered.broad")
    }
  })
}

# Run the app
shinyApp(ui = ui, server = server)
```

### Server and API Keys for the App

The Shiny app reads the pinned single-cell RNA-seq dataset from the Posit Connect server, with server URL and API key managed as secure environment variables (`POSIT_SERVER_URL` and `POSIT_API_KEY`) in the Posit Connect environment (see step 4).

### Generating the JSON file

To create a deployment-ready configuration for your Shiny app, run `rsconnect::writeManifest("app.R")` while your working directory is set to where the app's `R` script resides. If your Shiny application script is not named `app.R`, you should specify the script file's name using the `appDir` argument in the `writeManifest()` function, like `rsconnect::writeManifest(appDir = "your_app_script.R")`. This ensures the `manifest.json` correctly reflects your app's requirements and dependencies, prepping it for smooth deployment on Posit Connect.

```{r}
#| echo: true
#| eval: false

rsconnect::writeManifest("app.R")
```

The command `rsconnect::writeManifest("app.R")` generates a `manifest.json` file based on the `app.R` script in your Shiny application's directory. This manifest file is crucial for deploying your app to Posit Connect (or other RStudio-related hosting services) because it automatically identifies all the dependencies required to run the app, including the necessary R packages and files. Essentially, it ensures that your deployment environment is correctly set up to mirror your development environment

## Step 4: Deploying the App on Posit Connect

1.  **Commit and Push Changes**:

    -   Commit your report and the generated `manifest.json` file to your local Git repository.
    -   Push these changes to your GitHub repository to ensure all updates are saved and accessible.

2.  **Access Posit Connect**:

    -   Open your on-premises Posit Connect server's main page in a web browser.
    -   Navigate to **Content \> Publish \> Import from Git**.

3.  **Import Repository**:

    -   Enter the URL of your GitHub repository. For example: `https://github.com/ccb-hms/git-backed-posit-connect/`.
    -   Select the appropriate branch and enter a suitable title for your content.

4.  **Configure Environment Variables**:

    -   Go to **Settings \> Vars** on the Posit Connect page.
    -   Add the necessary environment variables, specifically `POSIT_SERVER_URL` and `POSIT_API_KEY`, to securely manage your app’s access credentials.

By following these steps, Posit Connect will automatically pull the contents of your repository and deploy the [Shiny app](https://ccb.connect.hms.harvard.edu/Git-Backed-Content-Shiny-App/) to visualize the single-cell RNA-seq data in reduced dimensions. on the server. 

By default, the Connect server checks your repository for new commits every 15 minutes, ensuring your deployed content remains up to date without any further manual interaction.
